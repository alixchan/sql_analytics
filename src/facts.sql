CREATE TABLE facts
(
    id number GENERATED BY DEFAULT AS IDENTITY START WITH 1 PRIMARY KEY,
    time_stamp date NOT NULL,
    remoteHost varchar2(40) NOT NULL,
    eventType number NOT NULL,
    userAgentNameVersion number NOT NULL,
    userAgentFamily number NOT NULL,
    userAgentVendor number NOT NULL,
    userAgentType number NOT NULL,
    userAgentDeviceCategory number NOT NULL,
    userAgentOsFamily number NOT NULL,
    userAgentOsVendor number NOT NULL,
    projectId number NOT NULL,
    sub_projectId number NOT NULL,
    currencySymbol number NOT NULL,
    localeLanguage number NOT NULL,
    locale_name number NOT NULL,
    CONSTRAINT fk_eventType FOREIGN KEY (eventType)
        REFERENCES eventTypeCategory (id),
    CONSTRAINT fk_userAgentNameVersion FOREIGN KEY (userAgentNameVersion)
        REFERENCES userAgentNameCategory (id),
    CONSTRAINT fk_userAgentFamily FOREIGN KEY (userAgentFamily)
        REFERENCES userAgentFamilyCategory (id),
    CONSTRAINT fk_userAgentVendor FOREIGN KEY (userAgentVendor)
        REFERENCES userAgentVendorCategory (id),
    CONSTRAINT fk_userAgentType FOREIGN KEY (userAgentType)
        REFERENCES userAgentTypeCategory (id),
    CONSTRAINT fk_userAgentDeviceCategory FOREIGN KEY (userAgentDeviceCategory)
        REFERENCES userAgentDeviceCategory (id),
    CONSTRAINT fk_userAgentOsFamily FOREIGN KEY (userAgentOsFamily)
        REFERENCES userAgentOsFamilyCategory (id),
    CONSTRAINT fk_userAgentOsVendor FOREIGN KEY (userAgentOsVendor)
        REFERENCES userAgentOsVendorCategory (id),
    CONSTRAINT fk_projectId FOREIGN KEY (projectId)
        REFERENCES projectIdCategory (id),
    CONSTRAINT fk_sub_projectId FOREIGN KEY (sub_projectId)
        REFERENCES sub_projectIdCategory (id),
    CONSTRAINT fk_currencySymbol FOREIGN KEY (currencySymbol)
        REFERENCES currencySymbolCategory (id),
    CONSTRAINT fk_localeLanguage FOREIGN KEY (localeLanguage)
        REFERENCES localeLanguageCategory (id),
    CONSTRAINT fk_locale_name FOREIGN KEY (locale_name)
        REFERENCES locale_nameCategory (id)
);

CREATE
OR REPLACE PROCEDURE print_contact IS
BEGIN

INSERT INTO facts(time_stamp,
                  remoteHost,
                  eventType,
                  userAgentNameVersion,
                  userAgentFamily,
                  userAgentVendor,
                  userAgentType,
                  userAgentDeviceCategory,
                  userAgentOsFamily,
                  userAgentOsVendor,
                  projectId,
                  sub_projectId,
                  currencySymbol,
                  localeLanguage,
                  locale_name) (SELECT CAST((TIMESTAMP '1970-01-01 00:00:00 GMT' +
                                             numtodsinterval(s.time_stamp / 1000, 'SECOND')) AT TIME ZONE 'GMT' AS date) time_stamp,
                                       remoteHost,
                                       NVL(e.id, 0)                                                                      eventType,
                                       NVL(n.id, 0)                                                                      userAgentNameVersion,
                                       NVL(f.id, 0)                                                                      userAgentFamily,
                                       NVL(v.id, 0)                                                                      userAgentVendor,
                                       NVL(t.id, 0)                                                                      userAgentType,
                                       NVL(d.id, 0)                                                                      userAgentDeviceCategory,
                                       NVL(fam.id, 0)                                                                    userAgentOsFamily,
                                       NVL(os.id, 0)                                                                     userAgentOsVendor,
                                       NVL(p.id, 0)                                                                      projectId,
                                       NVL(sp.id, 0)                                                                     sub_projectId,
                                       NVL(cs.id, 0)                                                                     currencySymbol,
                                       NVL(ll.id, 0)                                                                     localeLanguage,
                                       NVL(ln.id, 0)                                                                     locale_name
                                FROM staging_table s
                                         LEFT JOIN eventTypeCategory e
                                                   ON s.eventType = e.eventType
                                         LEFT JOIN userAgentNameCategory n
                                                   ON s.userAgentName = n.userAgentName
                                         LEFT JOIN userAgentFamilyCategory f
                                                   ON s.userAgentFamily = f.userAgentFamily
                                         LEFT JOIN userAgentVendorCategory v
                                                   ON s.userAgentVendor = v.userAgentVendor
                                         LEFT JOIN userAgentTypeCategory t
                                                   ON s.userAgentType = t.userAgentType
                                         LEFT JOIN userAgentDeviceCategory d
                                                   ON s.userAgentDeviceCategory = d.userAgentDevice
                                         LEFT JOIN userAgentOsFamilyCategory fam
                                                   ON s.userAgentOsFamily = fam.userAgentOsFamily
                                         LEFT JOIN userAgentOsVendorCategory os
                                                   ON s.userAgentOsVendor = os.userAgentOsVendor
                                         LEFT JOIN userAgentTypeCategory t
                                                   ON s.userAgentType = t.userAgentType
                                         LEFT JOIN projectIdCategory p
                                                   ON s.projectId = p.projectId
                                         LEFT JOIN sub_projectIdCategory sp
                                                   ON s.sub_projectId = sp.sub_projectId
                                         LEFT JOIN currencySymbolCategory cs
                                                   ON s.currencySymbol = cs.currencySymbol
                                         LEFT JOIN localeLanguageCategory ll
                                                   ON s.localeLanguage = ll.localeLanguage
                                         LEFT JOIN locale_nameCategory ln
                                                   ON s.locale_name = ln.locale_name);
END;



CREATE
OR replace PACKAGE PACKAGE_NORMILIZE AS

PROCEDURE NORMILIZE;

END PACKAGE_NORMILIZE;

CREATE
OR replace PACKAGE BODY PACKAGE_NORMILIZE AS

  PROCEDURE NORMILIZE AS
BEGIN
INSERT INTO facts(time_stamp,
                  remoteHost,
                  eventType,
                  userAgentNameVersion,
                  userAgentFamily,
                  userAgentVendor,
                  userAgentType,
                  userAgentDeviceCategory,
                  userAgentOsFamily,
                  userAgentOsVendor,
                  projectId,
                  sub_projectId,
                  currencySymbol,
                  localeLanguage,
                  locale_name) (SELECT CAST((TIMESTAMP '1970-01-01 00:00:00 GMT' +
                                             numtodsinterval(s.time_stamp / 1000, 'SECOND')) AT TIME ZONE 'GMT' AS date) time_stamp,
                                       remoteHost,
                                       NVL(e.id, 0)                                                                      eventType,
                                       NVL(n.id, 0)                                                                      userAgentNameVersion,
                                       NVL(f.id, 0)                                                                      userAgentFamily,
                                       NVL(v.id, 0)                                                                      userAgentVendor,
                                       NVL(t.id, 0)                                                                      userAgentType,
                                       NVL(d.id, 0)                                                                      userAgentDeviceCategory,
                                       NVL(fam.id, 0)                                                                    userAgentOsFamily,
                                       NVL(os.id, 0)                                                                     userAgentOsVendor,
                                       NVL(p.id, 0)                                                                      projectId,
                                       NVL(sp.id, 0)                                                                     sub_projectId,
                                       NVL(cs.id, 0)                                                                     currencySymbol,
                                       NVL(ll.id, 0)                                                                     localeLanguage,
                                       NVL(ln.id, 0)                                                                     locale_name
                                FROM staging_table s
                                         LEFT JOIN eventTypeCategory e
                                                   ON s.eventType = e.eventType
                                         LEFT JOIN userAgentNameCategory n
                                                   ON s.userAgentName = n.userAgentName
                                         LEFT JOIN userAgentFamilyCategory f
                                                   ON s.userAgentFamily = f.userAgentFamily
                                         LEFT JOIN userAgentVendorCategory v
                                                   ON s.userAgentVendor = v.userAgentVendor
                                         LEFT JOIN userAgentTypeCategory t
                                                   ON s.userAgentType = t.userAgentType
                                         LEFT JOIN userAgentDeviceCategory d
                                                   ON s.userAgentDeviceCategory = d.userAgentDevice
                                         LEFT JOIN userAgentOsFamilyCategory fam
                                                   ON s.userAgentOsFamily = fam.userAgentOsFamily
                                         LEFT JOIN userAgentOsVendorCategory os
                                                   ON s.userAgentOsVendor = os.userAgentOsVendor
                                         LEFT JOIN userAgentTypeCategory t
                                                   ON s.userAgentType = t.userAgentType
                                         LEFT JOIN projectIdCategory p
                                                   ON s.projectId = p.projectId
                                         LEFT JOIN sub_projectIdCategory sp
                                                   ON s.sub_projectId = sp.sub_projectId
                                         LEFT JOIN currencySymbolCategory cs
                                                   ON s.currencySymbol = cs.currencySymbol
                                         LEFT JOIN localeLanguageCategory ll
                                                   ON s.localeLanguage = ll.localeLanguage
                                         LEFT JOIN locale_nameCategory ln
                                                   ON s.locale_name = ln.locale_name);
END NORMILIZE;

END PACKAGE_NORMILIZE;


CREATE
OR replace PACKAGE PACKAGE_PROC_FACTS AS

PROCEDURE ProcessingFacts;

END PACKAGE_PROC_FACTS;

CREATE
OR replace PACKAGE BODY PACKAGE_PROC_FACTS AS

  PROCEDURE ProcessingFacts AS
BEGIN
INSERT INTO eventTypeCategory(eventType)
WITH event AS (SELECT DISTINCT eventType FROM staging_table WHERE eventType IS NOT NULL)
SELECT b.eventType
FROM event b
         LEFT JOIN eventTypeCategory a
                   ON a.eventType = b.eventType
WHERE id IS NULL;

MERGE INTO userAgentNameCategory t USING (SELECT userAgentName,
                                                 MAX(userAgentVersion) KEEP (DENSE_RANK FIRST ORDER BY time_stamp) userAgentVersion
                                          FROM staging_table s
                                          WHERE userAgentVersion IS NOT NULL
                                            AND userAgentName IS NOT NULL
                                          GROUP BY userAgentName) s ON (t.userAgentName = s.userAgentName) WHEN MATCHED THEN UPDATE SET t.userAgentVersion = s.userAgentVersion WHERE t.userAgentVersion <> s.userAgentVersion
        WHEN NOT MATCHED
            THEN INSERT (userAgentName, userAgentVersion)
            VALUES(s.userAgentName, s.userAgentVersion);
COMMIT;

INSERT INTO userAgentFamilyCategory(userAgentFamily)
WITH familyCategory AS (SELECT DISTINCT userAgentFamily FROM staging_table WHERE userAgentFamily IS NOT NULL)
SELECT b.userAgentFamily
FROM familyCategory b
         LEFT JOIN userAgentFamilyCategory a
                   ON a.userAgentFamily = b.userAgentFamily
WHERE id IS NULL;

INSERT INTO userAgentVendorCategory(userAgentVendor)
WITH vendorCategory(userAgentVendor) AS (SELECT DISTINCT userAgentVendor
                                         FROM staging_table
                                         WHERE userAgentVendor IS NOT NULL)
SELECT b.userAgentVendor
FROM vendorCategory b
         LEFT JOIN userAgentVendorCategory a
                   ON a.userAgentVendor = b.userAgentVendor
WHERE id IS NULL;

INSERT INTO userAgentTypeCategory(userAgentType)
WITH typeCategory AS (SELECT DISTINCT userAgentType FROM staging_table WHERE userAgentType IS NOT NULL)
SELECT b.userAgentType
FROM typeCategory b
         LEFT JOIN userAgentTypeCategory a
                   ON a.userAgentType = b.userAgentType
WHERE id IS NULL;

INSERT INTO userAgentDeviceCategory(userAgentDevice)
WITH deviceCategory AS (SELECT DISTINCT userAgentDeviceCategory
                        FROM staging_table
                        WHERE userAgentDeviceCategory IS NOT NULL)
SELECT b.userAgentDeviceCategory
FROM deviceCategory b
         LEFT JOIN userAgentDeviceCategory a
                   ON a.userAgentDevice = b.userAgentDeviceCategory
WHERE id IS NULL;

INSERT INTO userAgentOsFamilyCategory(userAgentOsFamily)
WITH familyOsCategory(userAgentOsFamily) AS (SELECT DISTINCT userAgentOsFamily
                                             FROM staging_table
                                             WHERE userAgentOsFamily IS NOT NULL)
SELECT b.userAgentOsFamily
FROM familyOsCategory b
         LEFT JOIN userAgentOsFamilyCategory a
                   ON a.userAgentOsFamily = b.userAgentOsFamily
WHERE id IS NULL;

INSERT INTO userAgentOsVendorCategory(userAgentOsVendor)
WITH vendorOsCategory(userAgentOsVendor) AS (SELECT DISTINCT userAgentOsVendor
                                             FROM staging_table
                                             WHERE userAgentOsVendor IS NOT NULL)
SELECT b.userAgentOsVendor
FROM vendorOsCategory b
         LEFT JOIN userAgentOsVendorCategory a
                   ON a.userAgentOsVendor = b.userAgentOsVendor
WHERE id IS NULL;

INSERT INTO projectIdCategory(projectId)
WITH projectCategory(projectId) AS (SELECT DISTINCT projectId FROM staging_table WHERE projectId IS NOT NULL)
SELECT b.projectId
FROM projectCategory b
         LEFT JOIN projectIdCategory a
                   ON a.projectId = b.projectId
WHERE id IS NULL;

INSERT INTO sub_projectIdCategory(sub_projectId)
WITH sub_projectCategory(sub_projectId) AS (SELECT DISTINCT sub_projectId
                                            FROM staging_table
                                            WHERE sub_projectId IS NOT NULL)
SELECT b.sub_projectId
FROM sub_projectCategory b
         LEFT JOIN sub_projectIdCategory a
                   ON a.sub_projectId = b.sub_projectId
WHERE id IS NULL;

INSERT INTO currencySymbolCategory(currencySymbol)
WITH currencyCategory(currencySymbol) AS (SELECT DISTINCT currencySymbol
                                          FROM staging_table
                                          WHERE currencySymbol IS NOT NULL)
SELECT b.currencySymbol
FROM currencyCategory b
         LEFT JOIN currencySymbolCategory a
                   ON a.currencySymbol = b.currencySymbol
WHERE id IS NULL;

INSERT INTO localeLanguageCategory(localeLanguage)
WITH localeCategory(localeLanguage) AS (SELECT DISTINCT localeLanguage
                                        FROM staging_table
                                        WHERE localeLanguage IS NOT NULL)
SELECT b.localeLanguage
FROM localeCategory b
         LEFT JOIN localeLanguageCategory a
                   ON a.localeLanguage = b.localeLanguage
WHERE id IS NULL;

INSERT INTO locale_nameCategory(locale_name)
WITH lnameCategory(locale_name) AS (SELECT DISTINCT locale_name
                                    FROM staging_table
                                    WHERE locale_name IS NOT NULL)
SELECT b.locale_name
FROM lnameCategory b
         LEFT JOIN locale_nameCategory a
                   ON a.locale_name = b.locale_name
WHERE id IS NULL;


END ProcessingFacts;

END PACKAGE_PROC_FACTS;


